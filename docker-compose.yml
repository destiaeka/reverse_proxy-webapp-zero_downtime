version: '3.3'

services:
  db: #dockercompose untuk postgre
    image: postgres:15
    container_name: finalproject-postgres
    restart: always
    environment: #set environment variabel (disesuaikan dengan file di app nodejs)
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: products
    volumes:
      - finalproject-postgres:/var/lib/postgresql/data #mount volume untuk service db
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql #mount database dari local ke container
    expose:
      - 5432
    networks:
      - finalproject
  
  blueapp: #dockercompose untuk blueapp
    build: ./blueapp
    container_name: blueapp
    restart: always
    environment:
      DB_HOST: db
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: products
      DB_PORT: 5432
    ports:
      - "3000:3000"
    depends_on:
      - db
    networks:
      - finalproject
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5

  greenapp: #dockercompose untuk greenapp
    build: ./greenapp
    container_name: greenapp
    restart: always
    environment:
      DB_HOST: db
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: products
      DB_PORT: 5432
    ports:
      - "3001:3001"
    depends_on:
      - db
    networks:
      - finalproject
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx: #dockercompose nginx digunakan untuk reverse proxy
    image: nginx:stable-alpine
    container_name: finalproject-nginx
    ports:
      - "802:80" #menggunakan port 802, sehingga client akses pake port 802
    depends_on:
      - blueapp
      - greenapp
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf #mount file dari local ke container
    networks:
      - finalproject

networks:
  finalproject:

volumes:
  finalproject-postgres:
